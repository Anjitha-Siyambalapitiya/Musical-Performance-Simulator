//Index - 210614A
import java.util.HashMap;

// Class for Live performances
class LivePerformance extends Performance implements Record{
    LivePerformance(String name, MainArtist mainArtist, int year, String venue, HashMap<String, Double> trackDict, BackUpSinger[] backUpSingers, BackUpDancer[] backUpDancers) {
        super(name, mainArtist, year, venue, trackDict, backUpSingers, backUpDancers);
    }
    public void interact() {
        System.out.println("This is the method interact in the class LivePerformance.");
    }

    @Override
    public void record() {
        System.out.println("This is the method record in the class LivePerformance.");
    }
}

// Class for studio performances
class StudioPerformance extends Performance implements Record {

    StudioPerformance(String name, MainArtist mainArtist, int year, String venue, HashMap<String, Double> trackDict, BackUpSinger[] backUpSingers, BackUpDancer[] backUpDancers) {
        super(name, mainArtist, year, venue, trackDict, backUpSingers, backUpDancers);
    }
    public void processAudio() {
        System.out.println("This is the method processAudio in the class StudioPerformance.");
    }

    @Override
    public void record() {
        System.out.println("This is the method record in the class StudioPerformance.");
    }
}

// Base class for all artists
class Artist {
    String name;
    Artist(String name) {
        this.name = name;
    }
}

//class for backup dancing artists
class BackUpDancer extends Artist implements IBackup {
    BackUpDancer(String name) {
        super(name);
    }
    public void dance() {
        // dancing...
        System.out.println("This is the method dance in the class BackUpDancer.");
    }

    @Override
    public void backUp() {
        System.out.println("This is the method backUp in the class BackUpDancer.");
        this.dance();
    }
}
// class for singer artist
class Singer extends Artist{
    Singer(String name) {
        super(name);
    }
    public void sing() {
        // singing the track...
        System.out.println("This is the method sing in the class Singer.");
    }
}

//class for backup singing artists
class BackUpSinger extends Singer implements IBackup {
    BackUpSinger(String name) {
        super(name);
    }

    @Override
    public void backUp() {
        System.out.println("This is the method backUp in the class BackUpSinger.");
        this.sing();
    }
}

// class for main artist
class MainArtist extends Singer {
    MainArtist(String name) {
        super(name);
    }
}

interface Record {
    public void record();
}

// Interface for backup performers
interface IBackup {
    public void backUp();
}

// Base class for all performances
class Performance {
    MainArtist mainArtist;
    public String name;
    public final int year;
    public final String venue;
    private HashMap<String, Double> trackDict;
    BackUpSinger[] backUpSingers;
    BackUpDancer[] backupDancers;
    Performance(String name, MainArtist mainArtist, int year, String venue, HashMap<String, Double> trackDict, BackUpSinger[] backUpSingers, BackUpDancer[] backupDancers) {
        this.name = name;
        this.mainArtist = mainArtist;

        this.trackDict = trackDict;

        this.backUpSingers = backUpSingers;
        this.backupDancers = backupDancers;

        this.venue = venue;
        this.year = year;

        System.out.println("Welcome to the Performance " + name + " by " + mainArtist.name + "!");

        for (BackUpSinger backupSinger : backUpSingers) {
            backupSinger.backUp();
        }
        for (BackUpDancer backupDancer : backupDancers) {
            backupDancer.backUp();
        }
    }
}
public class Main {
    public static void main(String[] arg) {
        MainArtist mainArtist = new MainArtist("Taylor Swift");

        BackUpSinger[] backUpSingers = {new BackUpSinger("Jeslyn"), new BackUpSinger("Melanie")};

        BackUpDancer[] backUpDancers = {new BackUpDancer("Stephanie"), new BackUpDancer("Jake")};

        HashMap<String, Double> trackDict = new HashMap<>();
        trackDict.put("Lavender Haze", 3.22);
        trackDict.put("Love Story", 3.57);

        LivePerformance performance = new LivePerformance("Eras Tour", mainArtist, 2023, "Glendale", trackDict, backUpSingers, backUpDancers);
    }
}